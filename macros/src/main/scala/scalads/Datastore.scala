package scalads

import scalads.core._

/**
 * @author Bryce Anderson
 *         Created on 5/31/13
 */
trait Datastore[+WriteResult, Entity] { self =>

  def update[U,V](theOld: U with EntityBacker[U, Entity], theNew: U): WriteResult

  /** Type of the query that will be generated by the datastore
    *
    * @tparam U Type of the query that will be generated by the datastore
    */
  type QueryType[U] <: Query[U, Entity]

  type TFactory[U] <: Transformer[U, Entity]

  private[scalads] def replacementEntity(old: Entity): Entity

  /** Stores or updates the entity in the data store
    *
    * @param entity native entity intended to be stored
    * @return result of storing the entity
    */
  def putEntity(entity: Entity): WriteResult

  /** Returns a new query that will search for the objects of type U
    *
    * @tparam U type of the entities of interest
    * @return the new query
    */
  def query[U: TFactory]: QueryType[U]

  def delete(entity: Entity): Unit

  def delete(entity: EntityBacker[_, Entity]):Unit = delete(entity.ds_entity)

  def put(obj: EntityBacker[_, Entity]): WriteResult =  putEntity(obj.ds_entity)

  /** Places the collection of Entities into the data store
    *
    * @param entities The Iterable[Entity] to be persisted
    */
  def putManyEntity(entities: Iterable[Entity]): Unit = entities.foreach(putEntity)

  /** Stores the provided object in the datastore
    *
    * @param obj object intended for storage
    * @tparam U static type of the object
    * @return result of the datastores write operation
    */
  def put[U](obj: U)(implicit transformer: TFactory[U]): WriteResult =
    putEntity(transformer.serializer.serialize(obj, transformer.newWriter(transformer.freshEntity())).result)

  /** Stores the provided collection of objects in the datastore
    *
    * @param objs collection of objects intended for storage
    * @tparam U static type of the object
    * @return result of the datastores write operation
    */
  def putMany[U](objs: Iterable[U])(implicit transformer: TFactory[U]): Unit = {
    putManyEntity(objs.map{ obj =>
      transformer.serializer.serialize(obj, transformer.newWriter(transformer.freshEntity())).result
    })
  }
}
