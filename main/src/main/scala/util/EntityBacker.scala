package util

/**
 * @author Bryce Anderson
 *         Created on 5/28/13
 */

import com.google.appengine.api.datastore.{Key, Entity}

/** Will be mixed in with the results returned from queries to facilitate updates
  *
  * Naming is ugly so as to not interfere with an entities natural fields/methods
  */

trait EntityBacker[U] { self: U =>
  def ds_serialize(obj: U, entity: Entity): Unit  // Typically generated by the macro
  def ds_backingEntity: Entity                    // Typically generated by the macro

  def ds_updateEntity = ds_serialize(self, ds_backingEntity)

  def ds_key = ds_backingEntity.getKey

  def ds_id = ds_key.getId

  def ds_parent: Key = ds_key.getParent()

  def ds_setProperty(name: String, value: Any) = ds_backingEntity.setProperty(name, value)
}

object EntityBacker {
  implicit def backerToKey(backer: EntityBacker[_]): Key = backer.ds_key
}
